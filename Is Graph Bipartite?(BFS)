class Solution {
    public boolean isBipartite(int[][] graph) {

        int color[] = new int[graph.length];
        Arrays.fill(color, -1);

        Queue<Integer> queue = new LinkedList<>();

        for(int u=0; u < graph.length; u++){
            if(color[u] == -1){
                queue.offer(u);
                boolean oddCycle = bfs(graph, color, queue);
                if(oddCycle)
                    return false;
            }
        }
        return true;

    }
    private boolean bfs(int[][] graph, int color[], Queue<Integer> queue){
        while(! queue.isEmpty()){
            int u = queue.poll();
            if(color[u] == -1)
                color[u] = 0;

            int[] neighbors = graph[u];
            if(neighbors != null){
                for(int v : neighbors){
                    if(color[v] == -1){
                        color[v] = Math.abs(color[u]-1);
                        queue.offer(v);
                    }
                    else if(color[u] == color[v])
                        return true;
                    }
            }

        }
        return false;
   }
}
  // Time Complexity -> O( V + E)
