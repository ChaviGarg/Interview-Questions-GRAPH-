class Solution {
    public boolean isBipartite(int[][] graph) {

        int color[] = new int[graph.length];
        Arrays.fill(color, -1);

        for(int u=0; u < graph.length; u++){
            if(color[u] == -1){
                boolean oddCycle = dfs(u, graph, color);
                if(oddCycle)
                    return false;
            }
        }
        return true;

    }
    private boolean dfs(int u, int[][] graph, int color[]){
        if(color[u] == -1)
            color[u] = 0;
        int[] neighbours = graph[u];
        if(neighbours != null){
            for(int v : neighbours){
                if(color[v] == -1){
                    color[v] = Math.abs(color[u]-1);
                    boolean oddLengthCycle = dfs(v, graph, color);
                    if(oddLengthCycle)
                       return true;
                }else if(color[v] == color[u]){
                    return true;
                }
            }
        }
        //color[u] = -1;
        return false;
    }
}
